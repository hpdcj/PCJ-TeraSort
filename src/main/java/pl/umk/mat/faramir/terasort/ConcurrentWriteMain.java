/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pl.umk.mat.faramir.terasort;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.Arrays;

public class ConcurrentWriteMain {

    public static void main(String[] args) {
        String outputFile = "outputFile.dat";
        long SIZE = 1L<<20;

        new File(outputFile).delete();

        Thread[] threads = new Thread[4];
        for (int tId = 0; tId < threads.length; ++tId) {
            int threadId = tId;
            Runnable r = () -> {
                try {
                    RandomAccessFile raf = new RandomAccessFile(outputFile, "rw");
                    FileChannel output = raf.getChannel();
                    long localSize = SIZE / threads.length;
                    long position = threadId * localSize;
                    long value = threadId * localSize/8;
                    while (localSize > 0) {
                        long size = Math.min(localSize, Integer.MAX_VALUE);
                        size = size - size % 8;
                        ByteBuffer bb = output.map(FileChannel.MapMode.READ_WRITE, position, size);
                        for (int i = 0; bb.hasRemaining(); ++i) {
                            bb.putLong(value++);
                        }
                        position += size;
                        localSize -= size;
                    }
                    output.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            };
            threads[tId] = new Thread(r);
        }
        long start = System.nanoTime();
        Arrays.stream(threads).forEach(Thread::start);
        Arrays.stream(threads).forEach(thread -> {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        long stop = System.nanoTime();
        System.out.println("Writing " + SIZE + " bytes using " + threads.length + " threads takes " + (stop - start) / 1e9 + " seconds");
    }
}
